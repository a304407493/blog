未完成的需求：
	1.将常用sql语句写出来做成sql API
	2.避免sql的注入/本质就是sql拼接
		在登录页面：
			用户名：admin'#
			密码：随便输入
			对单引号和双引号进行转义
		 在删除页面：
		 	admartdel.php
		 	admcomm.php
		 	错误的写法：	
		 		$sql = 'delete from arttag where artid=' . $artid;
		 		mQuery($sql);
		 	危险点：
		 		容易删除数据库中所有的数据：
		 	攻击方法：
		 		?admartdel.php?act=del&commid=44 + or 1
		 	解决方法：
		 		php的解决方法：
		 			获取的字符串+0——转换为整型
		 		$artid = $_GET('artid')+0;
	管理员登录：
		Cookie的命名规则：
			系统用户名
			用户用户名
		用户名：
			配置管理员登录的地址
		密码：
			有个文件专门用来配置管理员的用户名和密码
		解决方案：
			存放管理员用户表
			前台页面用户表
				用两个表来存放
			前期可以用一个表来存放：
				命名的规则需要注意

			如果写到专门的文件中——可能有问题
			可以写到——代码中
	数据的备份功能
	ip地址的判断功能

	各种版本：
		php版本
		jsp版本
		struts2版本
		hibernate版本
		Spring版本
		IBatis版本
	权限管理系统：

	x.Cookie
		1.
			有效期
				/*
				cookie的有效期, 由setcookie的第3个参数来指定
				如果不写有效,则关掉浏览器,cookie就失效

				也可以通过时间戳来指定失效时间
				*/
				setcookie('user','lisi' , time()+100);

				/*
				cookie失效是通过设置失效时间为当前时间之前,来失效的
				如setcookie('user','', 0);
				*/
		2.
			验证是否开启Cookie		
				<script>
			    window.onload = function() {
			    	if(!window.navigator.cookieEnabled) {
			    		document.writeln('<font color="red">你的浏览器cookie被禁用,请开启</font>');
			    	}
			    }
			    </script>
		3.
			计数器
				// cookie计数器,刷新1次加1
				if(empty($_COOKIE['cnt'])) {
					setcookie('cnt' ,1);
				} else {
					setcookie('cnt' , $_COOKIE['cnt'] + 1);
				}

				echo '你是第' , $_COOKIE['cnt'] , '次访问';

				http://localhost/boke/web/test/user-b.php
				/***
				本次请求,浏览器收到set-cookie命令,设置cookie, 本次请求结束.
				下次请求,浏览器带着上次请求结束时,设置的cookie值.

				所以 ,总是慢半拍
				**/	 



	3.添加log
		登录的sql的log千万不要打印到log日志中
	4.用户来的数据
		get post cookie


目录结构介绍：	
	css、font、images、js
	lib、upload
	view——静态页面
MySql需要熟练使用的命令：
	登录：
		mysql -u root -p
			admin
	显示所有的数据库：
		show databases;
	选定某个数据库：
		use blog
	查看某个表的创建语句：
		show create table user;

问题：
   
    一些不必要的东西不应该上传到网上——避免让居心不良的人看到一些不该看到的东西
    	
    1.路径必须有点
    <?php include('./view/comm/header.php');?>
    2.网站图标
    <link rel="icon" href="/static/images/icons/favicon.ico" type="image/ico">
    3.修改数据库 
    //$conn = mysql_connect("localhost", "root", "")or die("数据库链接错误"); 
 	//$conn = mysql_connect('localhost', 'user2664531' , 'abc82130142') or die("数据库错误");
    $conn = mysql_connect('localhost', 'user2664531' , 'abc82130142');
    加点

	瓶颈：
		批量请求——select查询
	当我添加一条记录之后，进入列表页面，刷新列表页时，又会重新添加一条记录
	标签与文章


	避免回复无意义的文章

	ip——
	用户——ip
	评论——ip

	关键词：
		在“</TITLE>”之后,加上: <META name="Keywords" content="(你的关键词内容,每个词之间用西文逗号分隔)" />

	调试：
		echo $sql;
		exit;
域名+项目名称：
	<?php echo URL_ROOT;?>



地址：
	登录界面：
		其实应该有两个登录界面：
			用户登录界面：
				http://blog.com/login.php
				//http://blog.com/my_blog/login.php	
			管理员用户登录界面：
				http://blog.com/admin/admin_login.php
				//http://blog.com/my_blog/admin/admin_login.php
	bootstrap参考页面：
		http://blog.com/bootstrap_help.php
		//http://blog.com/my_blog/bootstrap_help.php

	错误页面：
		其实应该有两个错误页面：
			用户的错误页面：
			管理员的错误页面：

	首页：
		http://blog.com/blog_index.php
		//http://blog.com/my_blog/blog_index.php
			2014-05-05|分类：闲谈随笔 | 标签：人生困难 | by 燕十八
	文章页：
		http://blog.com/blog_art.php
		//http://blog.com/my_blog/blog_art.php
	文章列表页：

	后台：
		后台首页：
			http://blog.com/admin/admin.php
			//http://blog.com/my_blog/admin/admin.php
		文章列表：
			http://blog.com/admin/admlist.php
			//http://blog.com/my_blog/admin/admlist.php
		发表文章：
			http://blog.com/admin/admart.php
			//http://blog.com/my_blog/admin/admart.php
		修改文章：
			http://blog.com/admin/admedit.php?artid=32
			//http://blog.com/my_blog/admin/admedit.php?artid=32
		目录添加：
			http://blog.com/cat_model/cat.php
			//http://blog.com/my_blog/cat_model/cat.php
功能介绍：
	文章的CRUD
	标签的CRUD
	目录的CRUD

	用户的CRUD
	回复的CRUD

	友情链接CRUD

	文章的CRUD
		获取最新博文
	目录的CRUD
		获取所有目录
	标签的CRUD
		获取所有标签


	1.查询功能：
	2.分页功能
	3.回复的回复功能
	4.日志功能
	5.防范脚本的功能
	6.攻击的功能
	7.登录/登出的功能
	8.加密的功能
	9.
		系统用户表/管理员用户表
		用户表
	
数据库结构/数据库建模：
	blog
		Collation-指定字符集utf8
	art-表名：
		artid-id/主键
			int-类型
			PK-主键
			NN-not null/不为null
			UQ-unique/唯一
			AI-AutoIncrement/自增
			UN-unsigned/非负数
			没有默认值
		title-标题
			varchar(45)-类型
			默认值为''
		catid-类别
			smallint-类型/4万多够用
			UQ-unique/唯一
			UN-unsigned/非负数
			默认值为0
		content-内容
			text
			text类型没有默认值
		pubtime-发布时间
		lastup-上次修改时间
			int
			UN-unsigned非负数
			默认值0
		userid-发表者
			int-类型
			UQ-unique/唯一
			UN-unsigned/非负数
		nick-发表者显示昵称
			varchar(45)-类型
		lastup
			int
			UQ-unique/唯一
			UN-unsigned/非负数
		commcount-评论数
			smallint

	user-用户：
		userid-id/主键
		name-用户名/主键-登录的时候也需要用到用户名
			UQ-unique/唯一不重复
			NN
		password-密码
			varchar(45)
			NN
		nick-显示名称/昵称
		email-电子邮箱
		lastlogin-上次登录时间
	cat-栏目
		catid-id/主键
		catname-栏目名称
		artcount-文章数量
			如果从数据库查询是相当耗费资源的——每发一篇帖子，文章数+1，每删除一篇帖子，文章数-1
			(系统均匀发布的过程——不会出现错误)
			发文章的时候多多做下——update一下(避免查询的时候耗费)
	tag-标签
		标签与文章处于多对多的关系——建立文章与标签的关联表
		tagid-id/主键
		word-标签
	arttag-文章与标签中间表
		artid-文章id
		tag-标签
		key at(artid,tag)
		key ta(tag,artid)
	comm
		content-pubtime

		commid

		userid-nick

		artid-title

	注意：
		模糊查询效率不高
		Engine：MyISAM
		时间类型：int unsigned 国际时间戳-类型的时间戳
		多对多查询：
			文章到标签：
				where artid = 
			标签到文章：
				where tagid = 
			设计索引
				key(aid,tag)
				key(tag,aid)
				冗余索引，但不是重复索引——根据查询方向的不同，提高效率-索引有一个左前缀规则


